import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  View,
  Panel,
  PanelHeader,
  PanelHeaderBack,
  Group,
  SimpleCell,
  Avatar,
  Text,
  Counter,
  Spinner,
  Div,
  Header,
  Progress,
  Card,
  CardGrid
} from '@vkontakte/vkui';
import {
  Icon28StatisticsOutline,
  Icon28GameOutline,
  Icon28TrophyOutline,
  Icon28FireOutline,
  Icon28ClockOutline,
  Icon28TargetOutline
} from '@vkontakte/icons';

import apiService from '../services/api';

const ProfilePage = ({ user }) => {
  const navigate = useNavigate();
  const [userStats, setUserStats] = useState(null);
  const [gameHistory, setGameHistory] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadUserData();
  }, []);

  const loadUserData = async () => {
    setLoading(true);
    try {
      const [statsResponse, historyResponse] = await Promise.all([
        apiService.getUserStats(),
        apiService.getUserGameHistory(1, 10)
      ]);

      if (statsResponse.success) {
        setUserStats(statsResponse.stats);
      }

      if (historyResponse.success) {
        setGameHistory(historyResponse.games);
      }
    } catch (error) {
      console.error('Failed to load user data:', error);
    } finally {
      setLoading(false);
    }
  };

  const getAchievementIcon = (achievement) => {
    const achievements = {
      'first_win': 'üèÜ',
      'speed_demon': '‚ö°',
      'music_expert': 'üéµ',
      'social_butterfly': 'üë•',
      'consistency_king': 'üî•'
    };
    return achievements[achievement] || 'üèÖ';
  };

  const getAchievementName = (achievement) => {
    const achievements = {
      'first_win': '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞',
      'speed_demon': '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –¥–µ–º–æ–Ω',
      'music_expert': '–ó–Ω–∞—Ç–æ–∫ –º—É–∑—ã–∫–∏',
      'social_butterfly': '–î—É—à–∞ –∫–æ–º–ø–∞–Ω–∏–∏',
      'consistency_king': '–ö–æ—Ä–æ–ª—å –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞'
    };
    return achievements[achievement] || '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ';
  };

  const formatTime = (seconds) => {
    return `${seconds.toFixed(1)}—Å`;
  };

  const getPositionText = (position, totalPlayers) => {
    if (position === 1) return `ü•á 1 –º–µ—Å—Ç–æ`;
    if (position === 2) return `ü•à 2 –º–µ—Å—Ç–æ`;
    if (position === 3) return `ü•â 3 –º–µ—Å—Ç–æ`;
    return `#${position} –∏–∑ ${totalPlayers}`;
  };

  if (loading) {
    return (
      <View activePanel="profile">
        <Panel id="profile">
          <PanelHeader
            before={<PanelHeaderBack onClick={() => navigate(-1)} />}
          >
            –ü—Ä–æ—Ñ–∏–ª—å
          </PanelHeader>
          <Div style={{ textAlign: 'center', padding: '60px 20px' }}>
            <Spinner size="large" />
          </Div>
        </Panel>
      </View>
    );
  }

  return (
    <View activePanel="profile">
      <Panel id="profile">
        <PanelHeader
          before={<PanelHeaderBack onClick={() => navigate(-1)} />}
        >
          –ü—Ä–æ—Ñ–∏–ª—å
        </PanelHeader>

        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <Group>
          <Div style={{ textAlign: 'center', padding: '20px' }}>
            <Avatar src={user.photo} size={80} style={{ marginBottom: '16px' }} />
            <Text style={{ fontSize: '20px', fontWeight: 'bold', marginBottom: '8px' }}>
              {user.firstName} {user.lastName}
            </Text>
            {userStats && (
              <Text style={{ color: 'var(--vkui--color_text_secondary)' }}>
                {userStats.totalScore} –æ—á–∫–æ–≤ ‚Ä¢ #{userStats.position || 'N/A'} –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
              </Text>
            )}
          </Div>
        </Group>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        {userStats && (
          <Group header={<Header>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</Header>}>
            <CardGrid size="l">
              <Card style={{ padding: '16px', textAlign: 'center' }}>
                <Icon28GameOutline style={{ marginBottom: '8px', color: 'var(--vkui--color_icon_accent)' }} />
                <Text style={{ fontSize: '24px', fontWeight: 'bold' }}>
                  {userStats.gamesPlayed}
                </Text>
                <Text style={{ color: 'var(--vkui--color_text_secondary)' }}>
                  –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ
                </Text>
              </Card>

              <Card style={{ padding: '16px', textAlign: 'center' }}>
                <Icon28TrophyOutline style={{ marginBottom: '8px', color: '#FFD700' }} />
                <Text style={{ fontSize: '24px', fontWeight: 'bold' }}>
                  {userStats.gamesWon}
                </Text>
                <Text style={{ color: 'var(--vkui--color_text_secondary)' }}>
                  –ü–æ–±–µ–¥
                </Text>
              </Card>

              <Card style={{ padding: '16px', textAlign: 'center' }}>
                <Icon28TargetOutline style={{ marginBottom: '8px', color: 'var(--vkui--color_icon_accent)' }} />
                <Text style={{ fontSize: '24px', fontWeight: 'bold' }}>
                  {userStats.accuracy}%
                </Text>
                <Text style={{ color: 'var(--vkui--color_text_secondary)' }}>
                  –¢–æ—á–Ω–æ—Å—Ç—å
                </Text>
              </Card>

              <Card style={{ padding: '16px', textAlign: 'center' }}>
                <Icon28ClockOutline style={{ marginBottom: '8px', color: 'var(--vkui--color_icon_secondary)' }} />
                <Text style={{ fontSize: '24px', fontWeight: 'bold' }}>
                  {formatTime(userStats.averageResponseTime)}
                </Text>
                <Text style={{ color: 'var(--vkui--color_text_secondary)' }}>
                  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
                </Text>
              </Card>
            </CardGrid>

            {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã */}
            <SimpleCell
              before={<Icon28TrophyOutline />}
              after={<Text>{userStats.winRate}%</Text>}
            >
              <div>
                <Text>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥</Text>
                <Progress 
                  value={userStats.winRate} 
                  style={{ marginTop: '8px' }}
                />
              </div>
            </SimpleCell>

            <SimpleCell
              before={<Icon28TargetOutline />}
              after={<Text>{userStats.accuracy}%</Text>}
            >
              <div>
                <Text>–¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤</Text>
                <Progress 
                  value={userStats.accuracy} 
                  style={{ marginTop: '8px' }}
                />
              </div>
            </SimpleCell>

            <SimpleCell
              before={<Icon28FireOutline />}
              after={<Counter>{userStats.streak.current}</Counter>}
            >
              <div>
                <Text>–¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è –ø–æ–±–µ–¥</Text>
                <Text style={{ color: 'var(--vkui--color_text_secondary)', fontSize: '14px' }}>
                  –õ—É—á—à–∞—è: {userStats.streak.best}
                </Text>
              </div>
            </SimpleCell>
          </Group>
        )}

        {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
        {userStats && userStats.achievements && userStats.achievements.length > 0 && (
          <Group header={<Header>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</Header>}>
            <CardGrid size="s">
              {userStats.achievements.map((achievement, index) => (
                <Card 
                  key={index}
                  style={{ 
                    padding: '16px', 
                    textAlign: 'center',
                    backgroundColor: 'var(--vkui--color_background_accent_themed)'
                  }}
                >
                  <Text style={{ fontSize: '32px', marginBottom: '8px' }}>
                    {getAchievementIcon(achievement)}
                  </Text>
                  <Text style={{ fontSize: '12px', fontWeight: 'medium' }}>
                    {getAchievementName(achievement)}
                  </Text>
                </Card>
              ))}
            </CardGrid>
          </Group>
        )}

        {/* –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä */}
        {gameHistory.length > 0 && (
          <Group header={<Header>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã</Header>}>
            {gameHistory.slice(0, 5).map((game, index) => (
              <SimpleCell
                key={game.id}
                before={
                  <div style={{ 
                    width: '40px', 
                    height: '40px', 
                    borderRadius: '50%',
                    backgroundColor: game.playerPosition === 1 ? '#4BB34B' : 
                                   game.playerPosition <= 3 ? '#FF9500' : 
                                   'var(--vkui--color_background_secondary)',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    fontSize: '14px',
                    fontWeight: 'bold',
                    color: game.playerPosition <= 3 ? 'white' : 'var(--vkui--color_text_primary)'
                  }}>
                    {game.playerPosition === 1 ? 'üèÜ' : `#${game.playerPosition}`}
                  </div>
                }
                after={<Text style={{ color: 'var(--vkui--color_text_accent)' }}>+{game.playerScore}</Text>}
                multiline
              >
                <div>
                  <Text weight="medium">
                    {getPositionText(game.playerPosition, game.totalPlayers)}
                  </Text>
                  <Text style={{ color: 'var(--vkui--color_text_secondary)' }}>
                    {new Date(game.finishedAt).toLocaleDateString()} ‚Ä¢ 
                    {game.roundsCount} —Ä–∞—É–Ω–¥–æ–≤ ‚Ä¢ 
                    {game.settings.difficulty}
                  </Text>
                </div>
              </SimpleCell>
            ))}
            
            {gameHistory.length > 5 && (
              <SimpleCell
                onClick={() => navigate('/history')}
                style={{ color: 'var(--vkui--color_text_accent)' }}
              >
                –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é
              </SimpleCell>
            )}
          </Group>
        )}

        {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
        {userStats && userStats.gamesPlayed === 0 && (
          <Group>
            <Div style={{ textAlign: 'center', padding: '40px 20px' }}>
              <Icon28StatisticsOutline 
                style={{ 
                  marginBottom: '16px',
                  color: 'var(--vkui--color_icon_secondary)',
                  fontSize: '48px'
                }} 
              />
              <Text style={{ 
                marginBottom: '8px',
                fontSize: '18px',
                fontWeight: 'medium'
              }}>
                –ü–æ—Ä–∞ –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å!
              </Text>
              <Text style={{ color: 'var(--vkui--color_text_secondary)' }}>
                –°—ã–≥—Ä–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∏–≥—Ä—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
              </Text>
            </Div>
          </Group>
        )}
      </Panel>
    </View>
  );
};

export default ProfilePage;